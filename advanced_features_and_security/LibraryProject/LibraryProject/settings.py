"""
Django settings for LibraryProject project.
Hardened for production with safe defaults.
Generated by 'django-admin startproject' using Django 5.2.5.
"""
from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

# -----------------------------------------------------------------------------
# Security / Debug
# -----------------------------------------------------------------------------
# IMPORTANT: keep the real secret in an environment variable in production.
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "dev-insecure-override-with-env-in-prod"
)

# In dev you can leave DEBUG=True. In prod, set DJANGO_DEBUG=false.
DEBUG = os.getenv("DJANGO_DEBUG", "true").lower() == "true"

# Always set explicit hosts in prod (comma-separated env var recommended)
ALLOWED_HOSTS = os.getenv(
    "DJANGO_ALLOWED_HOSTS",
    "localhost,127.0.0.1"
).split(",")

# -----------------------------------------------------------------------------
# Applications
# -----------------------------------------------------------------------------
INSTALLED_APPS = [
    # your apps
    'bookshelf',
    'relationship_app',

    # django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Optional: enable if you install django-csp (Step 4)
    # 'csp',
]

# Tell Django to use your custom user model
AUTH_USER_MODEL = "bookshelf.CustomUser"

# -----------------------------------------------------------------------------
# Middleware
# -----------------------------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Optional: enable if you install django-csp (Step 4)
    # 'csp.middleware.CSPMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Shim to add CSP + X-XSS-Protection header if django-csp is not used.
    # Create bookshelf/middleware.py with SecurityHeadersMiddleware from my next step,
    # then uncomment this line:
    # 'bookshelf.middleware.SecurityHeadersMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'

# -----------------------------------------------------------------------------
# Database
# -----------------------------------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# -----------------------------------------------------------------------------
# Password validation
# -----------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -----------------------------------------------------------------------------
# Internationalization / TZ
# -----------------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# -----------------------------------------------------------------------------
# Static & Media
# -----------------------------------------------------------------------------
STATIC_URL = 'static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# -----------------------------------------------------------------------------
# Secure HTTP headers & cookies
# -----------------------------------------------------------------------------
# Prevent MIME-type sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# Clickjacking protection (deny all iframes; change to 'SAMEORIGIN' if you must embed)
X_FRAME_OPTIONS = "DENY"

# Cookie flags — only sent via HTTPS in production
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Reduce JS access to cookies
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# Prefix cookies (helps some intermediaries)
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

# Force HTTPS in production
SECURE_SSL_REDIRECT = not DEBUG

# HSTS (enable only when you have HTTPS properly configured)
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year in prod
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Optional: lock down where POSTs can originate (set your real domains in prod)
# Example env: DJANGO_CSRF_TRUSTED_ORIGINS="https://yourdomain.com,https://www.yourdomain.com"
_csrf_origins = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "")
CSRF_TRUSTED_ORIGINS = [o.strip() for o in _csrf_origins.split(",") if o.strip()]

# -----------------------------------------------------------------------------
# Content Security Policy (Step 4)
# If you install django-csp, these will be picked up by CSPMiddleware.
# If not, the SecurityHeadersMiddleware (above) will set a similar header.
# -----------------------------------------------------------------------------
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # remove 'unsafe-inline' to harden further
CSP_IMG_SRC = ("'self'", "data:")
CSP_FONT_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)
# During rollout you can enable report-only to observe violations:
# CSP_REPORT_ONLY = True
# CSP_REPORT_URI = ("https://your-report-endpoint.example.com/csp",)

# -----------------------------------------------------------------------------
# Legacy/Task-specific note:
# Django ≥4 removed SECURE_BROWSER_XSS_FILTER, but the task asks for it.
# We satisfy the intent by setting "X-XSS-Protection" via SecurityHeadersMiddleware.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Defaults
# -----------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
